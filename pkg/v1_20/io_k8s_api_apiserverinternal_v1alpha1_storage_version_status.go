// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
//
// swagger:model io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus
type IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus struct {

	// If all API server instances agree on the same encoding storage version, then this field is set to that version. Otherwise this field is left empty. API servers should finish updating its storageVersionStatus entry before serving write operations, so that this field will be in sync with the reality.
	CommonEncodingVersion string `json:"commonEncodingVersion,omitempty"`

	// The latest available observations of the storageVersion's state.
	Conditions []*IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition `json:"conditions"`

	// The reported versions per API server instance.
	StorageVersions []*IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion `json:"storageVersions"`
}

// Validate validates this io k8s api apiserverinternal v1alpha1 storage version status
func (m *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) validateStorageVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageVersions) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageVersions); i++ {
		if swag.IsZero(m.StorageVersions[i]) { // not required
			continue
		}

		if m.StorageVersions[i] != nil {
			if err := m.StorageVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this io k8s api apiserverinternal v1alpha1 storage version status based on the context it is used
func (m *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) contextValidateStorageVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageVersions); i++ {

		if m.StorageVersions[i] != nil {
			if err := m.StorageVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
