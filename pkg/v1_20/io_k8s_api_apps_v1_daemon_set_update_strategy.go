// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIAppsV1DaemonSetUpdateStrategy DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
//
// swagger:model io.k8s.api.apps.v1.DaemonSetUpdateStrategy
type IoK8sAPIAppsV1DaemonSetUpdateStrategy struct {

	// Rolling update config params. Present only if type = "RollingUpdate".
	RollingUpdate *IoK8sAPIAppsV1RollingUpdateDaemonSet `json:"rollingUpdate,omitempty"`

	// Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
	//
	// Possible enum values:
	//  - `"OnDelete"` Replace the old daemons only when it's killed
	//  - `"RollingUpdate"` Replace the old daemons by new ones using rolling update i.e replace them on each node one after the other.
	// Enum: [OnDelete RollingUpdate]
	Type string `json:"type,omitempty"`
}

// Validate validates this io k8s api apps v1 daemon set update strategy
func (m *IoK8sAPIAppsV1DaemonSetUpdateStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRollingUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIAppsV1DaemonSetUpdateStrategy) validateRollingUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.RollingUpdate) { // not required
		return nil
	}

	if m.RollingUpdate != nil {
		if err := m.RollingUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollingUpdate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollingUpdate")
			}
			return err
		}
	}

	return nil
}

var ioK8sApiAppsV1DaemonSetUpdateStrategyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnDelete","RollingUpdate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioK8sApiAppsV1DaemonSetUpdateStrategyTypeTypePropEnum = append(ioK8sApiAppsV1DaemonSetUpdateStrategyTypeTypePropEnum, v)
	}
}

const (

	// IoK8sAPIAppsV1DaemonSetUpdateStrategyTypeOnDelete captures enum value "OnDelete"
	IoK8sAPIAppsV1DaemonSetUpdateStrategyTypeOnDelete string = "OnDelete"

	// IoK8sAPIAppsV1DaemonSetUpdateStrategyTypeRollingUpdate captures enum value "RollingUpdate"
	IoK8sAPIAppsV1DaemonSetUpdateStrategyTypeRollingUpdate string = "RollingUpdate"
)

// prop value enum
func (m *IoK8sAPIAppsV1DaemonSetUpdateStrategy) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioK8sApiAppsV1DaemonSetUpdateStrategyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoK8sAPIAppsV1DaemonSetUpdateStrategy) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this io k8s api apps v1 daemon set update strategy based on the context it is used
func (m *IoK8sAPIAppsV1DaemonSetUpdateStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRollingUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIAppsV1DaemonSetUpdateStrategy) contextValidateRollingUpdate(ctx context.Context, formats strfmt.Registry) error {

	if m.RollingUpdate != nil {
		if err := m.RollingUpdate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollingUpdate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollingUpdate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIAppsV1DaemonSetUpdateStrategy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIAppsV1DaemonSetUpdateStrategy) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIAppsV1DaemonSetUpdateStrategy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
