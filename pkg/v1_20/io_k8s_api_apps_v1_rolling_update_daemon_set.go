// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoK8sAPIAppsV1RollingUpdateDaemonSet Spec to control the desired behavior of daemon set rolling update.
//
// swagger:model io.k8s.api.apps.v1.RollingUpdateDaemonSet
type IoK8sAPIAppsV1RollingUpdateDaemonSet struct {

	// The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is beta field and enabled/disabled by DaemonSetUpdateSurge feature gate.
	MaxSurge IoK8sApimachineryPkgUtilIntstrIntOrString `json:"maxSurge,omitempty"`

	// The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
	MaxUnavailable IoK8sApimachineryPkgUtilIntstrIntOrString `json:"maxUnavailable,omitempty"`
}

// Validate validates this io k8s api apps v1 rolling update daemon set
func (m *IoK8sAPIAppsV1RollingUpdateDaemonSet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxSurge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxUnavailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIAppsV1RollingUpdateDaemonSet) validateMaxSurge(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxSurge) { // not required
		return nil
	}

	if err := m.MaxSurge.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("maxSurge")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("maxSurge")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIAppsV1RollingUpdateDaemonSet) validateMaxUnavailable(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxUnavailable) { // not required
		return nil
	}

	if err := m.MaxUnavailable.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("maxUnavailable")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("maxUnavailable")
		}
		return err
	}

	return nil
}

// ContextValidate validate this io k8s api apps v1 rolling update daemon set based on the context it is used
func (m *IoK8sAPIAppsV1RollingUpdateDaemonSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaxSurge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxUnavailable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIAppsV1RollingUpdateDaemonSet) contextValidateMaxSurge(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MaxSurge.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("maxSurge")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("maxSurge")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIAppsV1RollingUpdateDaemonSet) contextValidateMaxUnavailable(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MaxUnavailable.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("maxUnavailable")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("maxUnavailable")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIAppsV1RollingUpdateDaemonSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIAppsV1RollingUpdateDaemonSet) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIAppsV1RollingUpdateDaemonSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
