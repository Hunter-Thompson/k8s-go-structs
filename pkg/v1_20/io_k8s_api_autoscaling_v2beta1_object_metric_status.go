// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIAutoscalingV2beta1ObjectMetricStatus ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
//
// swagger:model io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus
type IoK8sAPIAutoscalingV2beta1ObjectMetricStatus struct {

	// averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
	AverageValue IoK8sApimachineryPkgAPIResourceQuantity `json:"averageValue,omitempty"`

	// currentValue is the current value of the metric (as a quantity).
	// Required: true
	CurrentValue *IoK8sApimachineryPkgAPIResourceQuantity `json:"currentValue"`

	// metricName is the name of the metric in question.
	// Required: true
	MetricName *string `json:"metricName"`

	// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector,omitempty"`

	// target is the described Kubernetes object.
	// Required: true
	Target *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference `json:"target"`
}

// Validate validates this io k8s api autoscaling v2beta1 object metric status
func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverageValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) validateAverageValue(formats strfmt.Registry) error {
	if swag.IsZero(m.AverageValue) { // not required
		return nil
	}

	if err := m.AverageValue.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("averageValue")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("averageValue")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) validateCurrentValue(formats strfmt.Registry) error {

	if err := validate.Required("currentValue", "body", m.CurrentValue); err != nil {
		return err
	}

	if err := validate.Required("currentValue", "body", m.CurrentValue); err != nil {
		return err
	}

	if m.CurrentValue != nil {
		if err := m.CurrentValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentValue")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) validateMetricName(formats strfmt.Registry) error {

	if err := validate.Required("metricName", "body", m.MetricName); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) validateSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.Selector) { // not required
		return nil
	}

	if m.Selector != nil {
		if err := m.Selector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selector")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io k8s api autoscaling v2beta1 object metric status based on the context it is used
func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAverageValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) contextValidateAverageValue(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AverageValue.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("averageValue")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("averageValue")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) contextValidateCurrentValue(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentValue != nil {
		if err := m.CurrentValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentValue")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) contextValidateSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.Selector != nil {
		if err := m.Selector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selector")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {
		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIAutoscalingV2beta1ObjectMetricStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
