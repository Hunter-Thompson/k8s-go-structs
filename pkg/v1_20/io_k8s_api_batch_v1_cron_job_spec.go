// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIBatchV1CronJobSpec CronJobSpec describes how the job execution will look like and when it will actually run.
//
// swagger:model io.k8s.api.batch.v1.CronJobSpec
type IoK8sAPIBatchV1CronJobSpec struct {

	// Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
	//
	// Possible enum values:
	//  - `"Allow"` allows CronJobs to run concurrently.
	//  - `"Forbid"` forbids concurrent runs, skipping next run if previous hasn't finished yet.
	//  - `"Replace"` cancels currently running job and replaces it with a new one.
	// Enum: [Allow Forbid Replace]
	ConcurrencyPolicy string `json:"concurrencyPolicy,omitempty"`

	// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
	FailedJobsHistoryLimit int32 `json:"failedJobsHistoryLimit,omitempty"`

	// Specifies the job that will be created when executing a CronJob.
	// Required: true
	JobTemplate *IoK8sAPIBatchV1JobTemplateSpec `json:"jobTemplate"`

	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	// Required: true
	Schedule *string `json:"schedule"`

	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds int64 `json:"startingDeadlineSeconds,omitempty"`

	// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
	SuccessfulJobsHistoryLimit int32 `json:"successfulJobsHistoryLimit,omitempty"`

	// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
	Suspend bool `json:"suspend,omitempty"`
}

// Validate validates this io k8s api batch v1 cron job spec
func (m *IoK8sAPIBatchV1CronJobSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConcurrencyPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ioK8sApiBatchV1CronJobSpecTypeConcurrencyPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allow","Forbid","Replace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioK8sApiBatchV1CronJobSpecTypeConcurrencyPolicyPropEnum = append(ioK8sApiBatchV1CronJobSpecTypeConcurrencyPolicyPropEnum, v)
	}
}

const (

	// IoK8sAPIBatchV1CronJobSpecConcurrencyPolicyAllow captures enum value "Allow"
	IoK8sAPIBatchV1CronJobSpecConcurrencyPolicyAllow string = "Allow"

	// IoK8sAPIBatchV1CronJobSpecConcurrencyPolicyForbid captures enum value "Forbid"
	IoK8sAPIBatchV1CronJobSpecConcurrencyPolicyForbid string = "Forbid"

	// IoK8sAPIBatchV1CronJobSpecConcurrencyPolicyReplace captures enum value "Replace"
	IoK8sAPIBatchV1CronJobSpecConcurrencyPolicyReplace string = "Replace"
)

// prop value enum
func (m *IoK8sAPIBatchV1CronJobSpec) validateConcurrencyPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioK8sApiBatchV1CronJobSpecTypeConcurrencyPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoK8sAPIBatchV1CronJobSpec) validateConcurrencyPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ConcurrencyPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateConcurrencyPolicyEnum("concurrencyPolicy", "body", m.ConcurrencyPolicy); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPIBatchV1CronJobSpec) validateJobTemplate(formats strfmt.Registry) error {

	if err := validate.Required("jobTemplate", "body", m.JobTemplate); err != nil {
		return err
	}

	if m.JobTemplate != nil {
		if err := m.JobTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIBatchV1CronJobSpec) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this io k8s api batch v1 cron job spec based on the context it is used
func (m *IoK8sAPIBatchV1CronJobSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJobTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIBatchV1CronJobSpec) contextValidateJobTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.JobTemplate != nil {
		if err := m.JobTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobTemplate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIBatchV1CronJobSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIBatchV1CronJobSpec) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIBatchV1CronJobSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
