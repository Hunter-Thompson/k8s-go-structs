// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIBatchV1JobCondition JobCondition describes current state of a job.
//
// swagger:model io.k8s.api.batch.v1.JobCondition
type IoK8sAPIBatchV1JobCondition struct {

	// Last time the condition was checked.
	// Format: date-time
	LastProbeTime IoK8sApimachineryPkgApisMetaV1Time `json:"lastProbeTime,omitempty" json,yaml:"lastProbeTime,omitempty"`

	// Last time the condition transit from one status to another.
	// Format: date-time
	LastTransitionTime IoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime,omitempty" json,yaml:"lastTransitionTime,omitempty"`

	// Human readable message indicating details about last transition.
	Message string `json:"message,omitempty" json,yaml:"message,omitempty"`

	// (brief) reason for the condition's last transition.
	Reason string `json:"reason,omitempty" json,yaml:"reason,omitempty"`

	// Status of the condition, one of True, False, Unknown.
	// Required: true
	Status *string `json:"status" json,yaml:"status"`

	// Type of job condition, Complete or Failed.
	// Required: true
	Type *string `json:"type" json,yaml:"type"`
}

// Validate validates this io k8s api batch v1 job condition
func (m *IoK8sAPIBatchV1JobCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastProbeTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastTransitionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIBatchV1JobCondition) validateLastProbeTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastProbeTime) { // not required
		return nil
	}

	if err := m.LastProbeTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastProbeTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastProbeTime")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIBatchV1JobCondition) validateLastTransitionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastTransitionTime) { // not required
		return nil
	}

	if err := m.LastTransitionTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastTransitionTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastTransitionTime")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIBatchV1JobCondition) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPIBatchV1JobCondition) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this io k8s api batch v1 job condition based on the context it is used
func (m *IoK8sAPIBatchV1JobCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastProbeTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastTransitionTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIBatchV1JobCondition) contextValidateLastProbeTime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LastProbeTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastProbeTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastProbeTime")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIBatchV1JobCondition) contextValidateLastTransitionTime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LastTransitionTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastTransitionTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastTransitionTime")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIBatchV1JobCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIBatchV1JobCondition) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIBatchV1JobCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
