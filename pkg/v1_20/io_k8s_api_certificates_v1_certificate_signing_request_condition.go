// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICertificatesV1CertificateSigningRequestCondition CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
//
// swagger:model io.k8s.api.certificates.v1.CertificateSigningRequestCondition
type IoK8sAPICertificatesV1CertificateSigningRequestCondition struct {

	// lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
	// Format: date-time
	LastTransitionTime IoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime,omitempty"`

	// lastUpdateTime is the time of the last update to this condition
	// Format: date-time
	LastUpdateTime IoK8sApimachineryPkgApisMetaV1Time `json:"lastUpdateTime,omitempty"`

	// message contains a human readable message with details about the request state
	Message string `json:"message,omitempty"`

	// reason indicates a brief reason for the request state
	Reason string `json:"reason,omitempty"`

	// status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown".
	// Required: true
	Status *string `json:"status"`

	// type of the condition. Known conditions are "Approved", "Denied", and "Failed".
	//
	// An "Approved" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.
	//
	// A "Denied" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.
	//
	// A "Failed" condition is added via the /status subresource, indicating the signer failed to issue the certificate.
	//
	// Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.
	//
	// Only one condition of a given type is allowed.
	//
	// Possible enum values:
	//  - `"Approved"` Approved indicates the request was approved and should be issued by the signer.
	//  - `"Denied"` Denied indicates the request was denied and should not be issued by the signer.
	//  - `"Failed"` Failed indicates the signer failed to issue the certificate.
	// Required: true
	// Enum: [Approved Denied Failed]
	Type *string `json:"type"`
}

// Validate validates this io k8s api certificates v1 certificate signing request condition
func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastTransitionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) validateLastTransitionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastTransitionTime) { // not required
		return nil
	}

	if err := m.LastTransitionTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastTransitionTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastTransitionTime")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) validateLastUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdateTime) { // not required
		return nil
	}

	if err := m.LastUpdateTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastUpdateTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastUpdateTime")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var ioK8sApiCertificatesV1CertificateSigningRequestConditionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Approved","Denied","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioK8sApiCertificatesV1CertificateSigningRequestConditionTypeTypePropEnum = append(ioK8sApiCertificatesV1CertificateSigningRequestConditionTypeTypePropEnum, v)
	}
}

const (

	// IoK8sAPICertificatesV1CertificateSigningRequestConditionTypeApproved captures enum value "Approved"
	IoK8sAPICertificatesV1CertificateSigningRequestConditionTypeApproved string = "Approved"

	// IoK8sAPICertificatesV1CertificateSigningRequestConditionTypeDenied captures enum value "Denied"
	IoK8sAPICertificatesV1CertificateSigningRequestConditionTypeDenied string = "Denied"

	// IoK8sAPICertificatesV1CertificateSigningRequestConditionTypeFailed captures enum value "Failed"
	IoK8sAPICertificatesV1CertificateSigningRequestConditionTypeFailed string = "Failed"
)

// prop value enum
func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioK8sApiCertificatesV1CertificateSigningRequestConditionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this io k8s api certificates v1 certificate signing request condition based on the context it is used
func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastTransitionTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) contextValidateLastTransitionTime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LastTransitionTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastTransitionTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastTransitionTime")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) contextValidateLastUpdateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LastUpdateTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastUpdateTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastUpdateTime")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICertificatesV1CertificateSigningRequestCondition) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICertificatesV1CertificateSigningRequestCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
