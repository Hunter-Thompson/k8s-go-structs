// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1HTTPGetAction HTTPGetAction describes an action based on HTTP Get requests.
//
// swagger:model io.k8s.api.core.v1.HTTPGetAction
type IoK8sAPICoreV1HTTPGetAction struct {

	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host string `json:"host,omitempty"`

	// Custom headers to set in the request. HTTP allows repeated headers.
	HTTPHeaders []*IoK8sAPICoreV1HTTPHeader `json:"httpHeaders"`

	// Path to access on the HTTP server.
	Path string `json:"path,omitempty"`

	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// Required: true
	Port *IoK8sApimachineryPkgUtilIntstrIntOrString `json:"port"`

	// Scheme to use for connecting to the host. Defaults to HTTP.
	//
	// Possible enum values:
	//  - `"HTTP"` means that the scheme used will be http://
	//  - `"HTTPS"` means that the scheme used will be https://
	// Enum: [HTTP HTTPS]
	Scheme string `json:"scheme,omitempty"`
}

// Validate validates this io k8s api core v1 HTTP get action
func (m *IoK8sAPICoreV1HTTPGetAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheme(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1HTTPGetAction) validateHTTPHeaders(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPHeaders) { // not required
		return nil
	}

	for i := 0; i < len(m.HTTPHeaders); i++ {
		if swag.IsZero(m.HTTPHeaders[i]) { // not required
			continue
		}

		if m.HTTPHeaders[i] != nil {
			if err := m.HTTPHeaders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("httpHeaders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("httpHeaders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1HTTPGetAction) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if m.Port != nil {
		if err := m.Port.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("port")
			}
			return err
		}
	}

	return nil
}

var ioK8sApiCoreV1HttpGetActionTypeSchemePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HTTP","HTTPS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioK8sApiCoreV1HttpGetActionTypeSchemePropEnum = append(ioK8sApiCoreV1HttpGetActionTypeSchemePropEnum, v)
	}
}

const (

	// IoK8sAPICoreV1HTTPGetActionSchemeHTTP captures enum value "HTTP"
	IoK8sAPICoreV1HTTPGetActionSchemeHTTP string = "HTTP"

	// IoK8sAPICoreV1HTTPGetActionSchemeHTTPS captures enum value "HTTPS"
	IoK8sAPICoreV1HTTPGetActionSchemeHTTPS string = "HTTPS"
)

// prop value enum
func (m *IoK8sAPICoreV1HTTPGetAction) validateSchemeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioK8sApiCoreV1HttpGetActionTypeSchemePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoK8sAPICoreV1HTTPGetAction) validateScheme(formats strfmt.Registry) error {
	if swag.IsZero(m.Scheme) { // not required
		return nil
	}

	// value enum
	if err := m.validateSchemeEnum("scheme", "body", m.Scheme); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this io k8s api core v1 HTTP get action based on the context it is used
func (m *IoK8sAPICoreV1HTTPGetAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHTTPHeaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1HTTPGetAction) contextValidateHTTPHeaders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HTTPHeaders); i++ {

		if m.HTTPHeaders[i] != nil {
			if err := m.HTTPHeaders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("httpHeaders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("httpHeaders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1HTTPGetAction) contextValidatePort(ctx context.Context, formats strfmt.Registry) error {

	if m.Port != nil {
		if err := m.Port.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("port")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1HTTPGetAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1HTTPGetAction) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1HTTPGetAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
