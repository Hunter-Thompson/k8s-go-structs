// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1NamespaceStatus NamespaceStatus is information about the current status of a Namespace.
//
// swagger:model io.k8s.api.core.v1.NamespaceStatus
type IoK8sAPICoreV1NamespaceStatus struct {

	// Represents the latest available observations of a namespace's current state.
	Conditions []*IoK8sAPICoreV1NamespaceCondition `json:"conditions"`

	// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
	//
	// Possible enum values:
	//  - `"Active"` means the namespace is available for use in the system
	//  - `"Terminating"` means the namespace is undergoing graceful termination
	// Enum: [Active Terminating]
	Phase string `json:"phase,omitempty"`
}

// Validate validates this io k8s api core v1 namespace status
func (m *IoK8sAPICoreV1NamespaceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1NamespaceStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var ioK8sApiCoreV1NamespaceStatusTypePhasePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Terminating"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioK8sApiCoreV1NamespaceStatusTypePhasePropEnum = append(ioK8sApiCoreV1NamespaceStatusTypePhasePropEnum, v)
	}
}

const (

	// IoK8sAPICoreV1NamespaceStatusPhaseActive captures enum value "Active"
	IoK8sAPICoreV1NamespaceStatusPhaseActive string = "Active"

	// IoK8sAPICoreV1NamespaceStatusPhaseTerminating captures enum value "Terminating"
	IoK8sAPICoreV1NamespaceStatusPhaseTerminating string = "Terminating"
)

// prop value enum
func (m *IoK8sAPICoreV1NamespaceStatus) validatePhaseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioK8sApiCoreV1NamespaceStatusTypePhasePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoK8sAPICoreV1NamespaceStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhaseEnum("phase", "body", m.Phase); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this io k8s api core v1 namespace status based on the context it is used
func (m *IoK8sAPICoreV1NamespaceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1NamespaceStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1NamespaceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1NamespaceStatus) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1NamespaceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
