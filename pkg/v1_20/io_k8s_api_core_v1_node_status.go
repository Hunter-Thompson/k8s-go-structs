// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1NodeStatus NodeStatus is information about the current status of a node.
//
// swagger:model io.k8s.api.core.v1.NodeStatus
type IoK8sAPICoreV1NodeStatus struct {

	// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
	Addresses []*IoK8sAPICoreV1NodeAddress `json:"addresses"`

	// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
	Allocatable map[string]IoK8sApimachineryPkgAPIResourceQuantity `json:"allocatable,omitempty"`

	// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity map[string]IoK8sApimachineryPkgAPIResourceQuantity `json:"capacity,omitempty"`

	// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
	Conditions []*IoK8sAPICoreV1NodeCondition `json:"conditions"`

	// Status of the config assigned to the node via the dynamic Kubelet config feature.
	Config *IoK8sAPICoreV1NodeConfigStatus `json:"config,omitempty"`

	// Endpoints of daemons running on the Node.
	DaemonEndpoints *IoK8sAPICoreV1NodeDaemonEndpoints `json:"daemonEndpoints,omitempty"`

	// List of container images on this node
	Images []*IoK8sAPICoreV1ContainerImage `json:"images"`

	// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
	NodeInfo *IoK8sAPICoreV1NodeSystemInfo `json:"nodeInfo,omitempty"`

	// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
	//
	// Possible enum values:
	//  - `"Pending"` means the node has been created/added by the system, but not configured.
	//  - `"Running"` means the node has been configured and has Kubernetes components running.
	//  - `"Terminated"` means the node has been removed from the cluster.
	// Enum: [Pending Running Terminated]
	Phase string `json:"phase,omitempty"`

	// List of volumes that are attached to the node.
	VolumesAttached []*IoK8sAPICoreV1AttachedVolume `json:"volumesAttached"`

	// List of attachable volumes in use (mounted) by the node.
	VolumesInUse []string `json:"volumesInUse"`
}

// Validate validates this io k8s api core v1 node status
func (m *IoK8sAPICoreV1NodeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllocatable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaemonEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumesAttached(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) validateAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) validateAllocatable(formats strfmt.Registry) error {
	if swag.IsZero(m.Allocatable) { // not required
		return nil
	}

	for k := range m.Allocatable {

		if val, ok := m.Allocatable[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) validateCapacity(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	for k := range m.Capacity {

		if val, ok := m.Capacity[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) validateDaemonEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.DaemonEndpoints) { // not required
		return nil
	}

	if m.DaemonEndpoints != nil {
		if err := m.DaemonEndpoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daemonEndpoints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("daemonEndpoints")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) validateImages(formats strfmt.Registry) error {
	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) validateNodeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeInfo) { // not required
		return nil
	}

	if m.NodeInfo != nil {
		if err := m.NodeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeInfo")
			}
			return err
		}
	}

	return nil
}

var ioK8sApiCoreV1NodeStatusTypePhasePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Running","Terminated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioK8sApiCoreV1NodeStatusTypePhasePropEnum = append(ioK8sApiCoreV1NodeStatusTypePhasePropEnum, v)
	}
}

const (

	// IoK8sAPICoreV1NodeStatusPhasePending captures enum value "Pending"
	IoK8sAPICoreV1NodeStatusPhasePending string = "Pending"

	// IoK8sAPICoreV1NodeStatusPhaseRunning captures enum value "Running"
	IoK8sAPICoreV1NodeStatusPhaseRunning string = "Running"

	// IoK8sAPICoreV1NodeStatusPhaseTerminated captures enum value "Terminated"
	IoK8sAPICoreV1NodeStatusPhaseTerminated string = "Terminated"
)

// prop value enum
func (m *IoK8sAPICoreV1NodeStatus) validatePhaseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioK8sApiCoreV1NodeStatusTypePhasePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhaseEnum("phase", "body", m.Phase); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) validateVolumesAttached(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumesAttached) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumesAttached); i++ {
		if swag.IsZero(m.VolumesAttached[i]) { // not required
			continue
		}

		if m.VolumesAttached[i] != nil {
			if err := m.VolumesAttached[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumesAttached" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumesAttached" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this io k8s api core v1 node status based on the context it is used
func (m *IoK8sAPICoreV1NodeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAllocatable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCapacity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDaemonEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumesAttached(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) contextValidateAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Addresses); i++ {

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) contextValidateAllocatable(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Allocatable {

		if val, ok := m.Allocatable[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) contextValidateCapacity(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Capacity {

		if val, ok := m.Capacity[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) contextValidateDaemonEndpoints(ctx context.Context, formats strfmt.Registry) error {

	if m.DaemonEndpoints != nil {
		if err := m.DaemonEndpoints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daemonEndpoints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("daemonEndpoints")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) contextValidateImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Images); i++ {

		if m.Images[i] != nil {
			if err := m.Images[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) contextValidateNodeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeInfo != nil {
		if err := m.NodeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1NodeStatus) contextValidateVolumesAttached(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumesAttached); i++ {

		if m.VolumesAttached[i] != nil {
			if err := m.VolumesAttached[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumesAttached" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumesAttached" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1NodeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1NodeStatus) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1NodeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
