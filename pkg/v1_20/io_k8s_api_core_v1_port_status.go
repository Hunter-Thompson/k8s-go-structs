// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1PortStatus io k8s api core v1 port status
//
// swagger:model io.k8s.api.core.v1.PortStatus
type IoK8sAPICoreV1PortStatus struct {

	// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
	//   CamelCase names
	// - cloud provider specific error values must have names that comply with the
	//   format foo.example.com/CamelCase.
	Error string `json:"error,omitempty"`

	// Port is the port number of the service port of which status is recorded here
	// Required: true
	Port *int32 `json:"port"`

	// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
	//
	// Possible enum values:
	//  - `"SCTP"` is the SCTP protocol.
	//  - `"TCP"` is the TCP protocol.
	//  - `"UDP"` is the UDP protocol.
	// Required: true
	// Enum: [SCTP TCP UDP]
	Protocol *string `json:"protocol"`
}

// Validate validates this io k8s api core v1 port status
func (m *IoK8sAPICoreV1PortStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1PortStatus) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

var ioK8sApiCoreV1PortStatusTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SCTP","TCP","UDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioK8sApiCoreV1PortStatusTypeProtocolPropEnum = append(ioK8sApiCoreV1PortStatusTypeProtocolPropEnum, v)
	}
}

const (

	// IoK8sAPICoreV1PortStatusProtocolSCTP captures enum value "SCTP"
	IoK8sAPICoreV1PortStatusProtocolSCTP string = "SCTP"

	// IoK8sAPICoreV1PortStatusProtocolTCP captures enum value "TCP"
	IoK8sAPICoreV1PortStatusProtocolTCP string = "TCP"

	// IoK8sAPICoreV1PortStatusProtocolUDP captures enum value "UDP"
	IoK8sAPICoreV1PortStatusProtocolUDP string = "UDP"
)

// prop value enum
func (m *IoK8sAPICoreV1PortStatus) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioK8sApiCoreV1PortStatusTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoK8sAPICoreV1PortStatus) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this io k8s api core v1 port status based on context it is used
func (m *IoK8sAPICoreV1PortStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1PortStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1PortStatus) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1PortStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
