// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1Toleration The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
//
// swagger:model io.k8s.api.core.v1.Toleration
type IoK8sAPICoreV1Toleration struct {

	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	//
	// Possible enum values:
	//  - `"NoExecute"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.
	//  - `"NoSchedule"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.
	//  - `"PreferNoSchedule"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.
	// Enum: [NoExecute NoSchedule PreferNoSchedule]
	Effect string `json:"effect,omitempty"`

	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key string `json:"key,omitempty"`

	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	//
	// Possible enum values:
	//  - `"Equal"`
	//  - `"Exists"`
	// Enum: [Equal Exists]
	Operator string `json:"operator,omitempty"`

	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds int64 `json:"tolerationSeconds,omitempty"`

	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value string `json:"value,omitempty"`
}

// Validate validates this io k8s api core v1 toleration
func (m *IoK8sAPICoreV1Toleration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEffect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ioK8sApiCoreV1TolerationTypeEffectPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoExecute","NoSchedule","PreferNoSchedule"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioK8sApiCoreV1TolerationTypeEffectPropEnum = append(ioK8sApiCoreV1TolerationTypeEffectPropEnum, v)
	}
}

const (

	// IoK8sAPICoreV1TolerationEffectNoExecute captures enum value "NoExecute"
	IoK8sAPICoreV1TolerationEffectNoExecute string = "NoExecute"

	// IoK8sAPICoreV1TolerationEffectNoSchedule captures enum value "NoSchedule"
	IoK8sAPICoreV1TolerationEffectNoSchedule string = "NoSchedule"

	// IoK8sAPICoreV1TolerationEffectPreferNoSchedule captures enum value "PreferNoSchedule"
	IoK8sAPICoreV1TolerationEffectPreferNoSchedule string = "PreferNoSchedule"
)

// prop value enum
func (m *IoK8sAPICoreV1Toleration) validateEffectEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioK8sApiCoreV1TolerationTypeEffectPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoK8sAPICoreV1Toleration) validateEffect(formats strfmt.Registry) error {
	if swag.IsZero(m.Effect) { // not required
		return nil
	}

	// value enum
	if err := m.validateEffectEnum("effect", "body", m.Effect); err != nil {
		return err
	}

	return nil
}

var ioK8sApiCoreV1TolerationTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Equal","Exists"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ioK8sApiCoreV1TolerationTypeOperatorPropEnum = append(ioK8sApiCoreV1TolerationTypeOperatorPropEnum, v)
	}
}

const (

	// IoK8sAPICoreV1TolerationOperatorEqual captures enum value "Equal"
	IoK8sAPICoreV1TolerationOperatorEqual string = "Equal"

	// IoK8sAPICoreV1TolerationOperatorExists captures enum value "Exists"
	IoK8sAPICoreV1TolerationOperatorExists string = "Exists"
)

// prop value enum
func (m *IoK8sAPICoreV1Toleration) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ioK8sApiCoreV1TolerationTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IoK8sAPICoreV1Toleration) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this io k8s api core v1 toleration based on context it is used
func (m *IoK8sAPICoreV1Toleration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1Toleration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1Toleration) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1Toleration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
