// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoK8sAPIDiscoveryV1EndpointConditions EndpointConditions represents the current condition of an endpoint.
//
// swagger:model io.k8s.api.discovery.v1.EndpointConditions
type IoK8sAPIDiscoveryV1EndpointConditions struct {

	// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints.
	Ready bool `json:"ready,omitempty"`

	// serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition. This field can be enabled with the EndpointSliceTerminatingCondition feature gate.
	Serving bool `json:"serving,omitempty"`

	// terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating. This field can be enabled with the EndpointSliceTerminatingCondition feature gate.
	Terminating bool `json:"terminating,omitempty"`
}

// Validate validates this io k8s api discovery v1 endpoint conditions
func (m *IoK8sAPIDiscoveryV1EndpointConditions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this io k8s api discovery v1 endpoint conditions based on context it is used
func (m *IoK8sAPIDiscoveryV1EndpointConditions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIDiscoveryV1EndpointConditions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIDiscoveryV1EndpointConditions) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIDiscoveryV1EndpointConditions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
