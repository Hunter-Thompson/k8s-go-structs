// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoK8sAPIDiscoveryV1beta1EndpointHints EndpointHints provides hints describing how an endpoint should be consumed.
//
// swagger:model io.k8s.api.discovery.v1beta1.EndpointHints
type IoK8sAPIDiscoveryV1beta1EndpointHints struct {

	// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing. May contain a maximum of 8 entries.
	ForZones []*IoK8sAPIDiscoveryV1beta1ForZone `json:"forZones"`
}

// Validate validates this io k8s api discovery v1beta1 endpoint hints
func (m *IoK8sAPIDiscoveryV1beta1EndpointHints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForZones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIDiscoveryV1beta1EndpointHints) validateForZones(formats strfmt.Registry) error {
	if swag.IsZero(m.ForZones) { // not required
		return nil
	}

	for i := 0; i < len(m.ForZones); i++ {
		if swag.IsZero(m.ForZones[i]) { // not required
			continue
		}

		if m.ForZones[i] != nil {
			if err := m.ForZones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forZones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("forZones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this io k8s api discovery v1beta1 endpoint hints based on the context it is used
func (m *IoK8sAPIDiscoveryV1beta1EndpointHints) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateForZones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIDiscoveryV1beta1EndpointHints) contextValidateForZones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ForZones); i++ {

		if m.ForZones[i] != nil {
			if err := m.ForZones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forZones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("forZones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIDiscoveryV1beta1EndpointHints) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIDiscoveryV1beta1EndpointHints) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIDiscoveryV1beta1EndpointHints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
