// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIEventsV1beta1Event Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
//
// swagger:model io.k8s.api.events.v1beta1.Event
type IoK8sAPIEventsV1beta1Event struct {

	// action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field can have at most 128 characters.
	Action string `json:"action,omitempty" json,yaml:"action,omitempty"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion string `json:"apiVersion,omitempty" json,yaml:"apiVersion,omitempty"`

	// deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
	DeprecatedCount int32 `json:"deprecatedCount,omitempty" json,yaml:"deprecatedCount,omitempty"`

	// deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
	// Format: date-time
	DeprecatedFirstTimestamp IoK8sApimachineryPkgApisMetaV1Time `json:"deprecatedFirstTimestamp,omitempty" json,yaml:"deprecatedFirstTimestamp,omitempty"`

	// deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
	// Format: date-time
	DeprecatedLastTimestamp IoK8sApimachineryPkgApisMetaV1Time `json:"deprecatedLastTimestamp,omitempty" json,yaml:"deprecatedLastTimestamp,omitempty"`

	// deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.
	DeprecatedSource *IoK8sAPICoreV1EventSource `json:"deprecatedSource,omitempty" json,yaml:"deprecatedSource,omitempty"`

	// eventTime is the time when this Event was first observed. It is required.
	// Required: true
	// Format: date-time
	EventTime *IoK8sApimachineryPkgApisMetaV1MicroTime `json:"eventTime" json,yaml:"eventTime"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind,omitempty" json,yaml:"kind,omitempty"`

	// metadata
	// Required: true
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata" json,yaml:"metadata"`

	// note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
	Note string `json:"note,omitempty" json,yaml:"note,omitempty"`

	// reason is why the action was taken. It is human-readable. This field can have at most 128 characters.
	Reason string `json:"reason,omitempty" json,yaml:"reason,omitempty"`

	// regarding contains the object this Event is about. In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.
	Regarding *IoK8sAPICoreV1ObjectReference `json:"regarding,omitempty" json,yaml:"regarding,omitempty"`

	// related is the optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.
	Related *IoK8sAPICoreV1ObjectReference `json:"related,omitempty" json,yaml:"related,omitempty"`

	// reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.
	ReportingController string `json:"reportingController,omitempty" json,yaml:"reportingController,omitempty"`

	// reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.
	ReportingInstance string `json:"reportingInstance,omitempty" json,yaml:"reportingInstance,omitempty"`

	// series is data about the Event series this event represents or nil if it's a singleton Event.
	Series *IoK8sAPIEventsV1beta1EventSeries `json:"series,omitempty" json,yaml:"series,omitempty"`

	// type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable.
	Type string `json:"type,omitempty" json,yaml:"type,omitempty"`
}

// Validate validates this io k8s api events v1beta1 event
func (m *IoK8sAPIEventsV1beta1Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeprecatedFirstTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeprecatedLastTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeprecatedSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegarding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) validateDeprecatedFirstTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.DeprecatedFirstTimestamp) { // not required
		return nil
	}

	if err := m.DeprecatedFirstTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deprecatedFirstTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deprecatedFirstTimestamp")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) validateDeprecatedLastTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.DeprecatedLastTimestamp) { // not required
		return nil
	}

	if err := m.DeprecatedLastTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deprecatedLastTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deprecatedLastTimestamp")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) validateDeprecatedSource(formats strfmt.Registry) error {
	if swag.IsZero(m.DeprecatedSource) { // not required
		return nil
	}

	if m.DeprecatedSource != nil {
		if err := m.DeprecatedSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprecatedSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deprecatedSource")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	if m.EventTime != nil {
		if err := m.EventTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventTime")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) validateRegarding(formats strfmt.Registry) error {
	if swag.IsZero(m.Regarding) { // not required
		return nil
	}

	if m.Regarding != nil {
		if err := m.Regarding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regarding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("regarding")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) validateRelated(formats strfmt.Registry) error {
	if swag.IsZero(m.Related) { // not required
		return nil
	}

	if m.Related != nil {
		if err := m.Related.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("related")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("related")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) validateSeries(formats strfmt.Registry) error {
	if swag.IsZero(m.Series) { // not required
		return nil
	}

	if m.Series != nil {
		if err := m.Series.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("series")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("series")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io k8s api events v1beta1 event based on the context it is used
func (m *IoK8sAPIEventsV1beta1Event) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeprecatedFirstTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeprecatedLastTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeprecatedSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegarding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) contextValidateDeprecatedFirstTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeprecatedFirstTimestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deprecatedFirstTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deprecatedFirstTimestamp")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) contextValidateDeprecatedLastTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeprecatedLastTimestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deprecatedLastTimestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deprecatedLastTimestamp")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) contextValidateDeprecatedSource(ctx context.Context, formats strfmt.Registry) error {

	if m.DeprecatedSource != nil {
		if err := m.DeprecatedSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprecatedSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deprecatedSource")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) contextValidateEventTime(ctx context.Context, formats strfmt.Registry) error {

	if m.EventTime != nil {
		if err := m.EventTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventTime")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) contextValidateRegarding(ctx context.Context, formats strfmt.Registry) error {

	if m.Regarding != nil {
		if err := m.Regarding.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regarding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("regarding")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) contextValidateRelated(ctx context.Context, formats strfmt.Registry) error {

	if m.Related != nil {
		if err := m.Related.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("related")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("related")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIEventsV1beta1Event) contextValidateSeries(ctx context.Context, formats strfmt.Registry) error {

	if m.Series != nil {
		if err := m.Series.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("series")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("series")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIEventsV1beta1Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIEventsV1beta1Event) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIEventsV1beta1Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
