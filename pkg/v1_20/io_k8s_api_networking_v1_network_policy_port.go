// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoK8sAPINetworkingV1NetworkPolicyPort NetworkPolicyPort describes a port to allow traffic on
//
// swagger:model io.k8s.api.networking.v1.NetworkPolicyPort
type IoK8sAPINetworkingV1NetworkPolicyPort struct {

	// If set, indicates that the range of ports from port to endPort, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port. This feature is in Beta state and is enabled by default. It can be disabled using the Feature Gate "NetworkPolicyEndPort".
	EndPort int32 `json:"endPort,omitempty"`

	// The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
	Port IoK8sApimachineryPkgUtilIntstrIntOrString `json:"port,omitempty"`

	// The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this io k8s api networking v1 network policy port
func (m *IoK8sAPINetworkingV1NetworkPolicyPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPINetworkingV1NetworkPolicyPort) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := m.Port.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("port")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("port")
		}
		return err
	}

	return nil
}

// ContextValidate validate this io k8s api networking v1 network policy port based on the context it is used
func (m *IoK8sAPINetworkingV1NetworkPolicyPort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPINetworkingV1NetworkPolicyPort) contextValidatePort(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Port.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("port")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("port")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPINetworkingV1NetworkPolicyPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPINetworkingV1NetworkPolicyPort) UnmarshalBinary(b []byte) error {
	var res IoK8sAPINetworkingV1NetworkPolicyPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
