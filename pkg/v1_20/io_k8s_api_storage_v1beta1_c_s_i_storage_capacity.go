// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIStorageV1beta1CSIStorageCapacity CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
//
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
//
// The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
//
// The producer of these objects can decide which approach is more suitable.
//
// They are consumed by the kube-scheduler if the CSIStorageCapacity beta feature gate is enabled there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.
//
// swagger:model io.k8s.api.storage.v1beta1.CSIStorageCapacity
type IoK8sAPIStorageV1beta1CSIStorageCapacity struct {

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion string `json:"apiVersion,omitempty"`

	// Capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable and treated like zero capacity.
	Capacity IoK8sApimachineryPkgAPIResourceQuantity `json:"capacity,omitempty"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind,omitempty"`

	// MaximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.
	//
	// This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.
	MaximumVolumeSize IoK8sApimachineryPkgAPIResourceQuantity `json:"maximumVolumeSize,omitempty"`

	// Standard object's metadata. The name has no particular meaning. It must be be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.
	//
	// Objects are namespaced.
	//
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`

	// NodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.
	NodeTopology *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"nodeTopology,omitempty"`

	// The name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
	// Required: true
	StorageClassName *string `json:"storageClassName"`
}

// Validate validates this io k8s api storage v1beta1 c s i storage capacity
func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumVolumeSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTopology(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageClassName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) validateCapacity(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	if err := m.Capacity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capacity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capacity")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) validateMaximumVolumeSize(formats strfmt.Registry) error {
	if swag.IsZero(m.MaximumVolumeSize) { // not required
		return nil
	}

	if err := m.MaximumVolumeSize.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("maximumVolumeSize")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("maximumVolumeSize")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) validateNodeTopology(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTopology) { // not required
		return nil
	}

	if m.NodeTopology != nil {
		if err := m.NodeTopology.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeTopology")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeTopology")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) validateStorageClassName(formats strfmt.Registry) error {

	if err := validate.Required("storageClassName", "body", m.StorageClassName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this io k8s api storage v1beta1 c s i storage capacity based on the context it is used
func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapacity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaximumVolumeSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeTopology(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) contextValidateCapacity(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Capacity.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capacity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capacity")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) contextValidateMaximumVolumeSize(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MaximumVolumeSize.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("maximumVolumeSize")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("maximumVolumeSize")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) contextValidateNodeTopology(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeTopology != nil {
		if err := m.NodeTopology.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeTopology")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeTopology")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIStorageV1beta1CSIStorageCapacity) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIStorageV1beta1CSIStorageCapacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
