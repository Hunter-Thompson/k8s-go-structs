// Code generated by go-swagger; DO NOT EDIT.

package v1_20

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
//
// swagger:model io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
type IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery struct {

	// groupVersion specifies the API group and version in the form "group/version"
	// Required: true
	GroupVersion *string `json:"groupVersion" json,yaml:"groupVersion"`

	// version specifies the version in the form of "version". This is to save the clients the trouble of splitting the GroupVersion.
	// Required: true
	Version *string `json:"version" json,yaml:"version"`
}

// Validate validates this io k8s apimachinery pkg apis meta v1 group version for discovery
func (m *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) validateGroupVersion(formats strfmt.Registry) error {

	if err := validate.Required("groupVersion", "body", m.GroupVersion); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this io k8s apimachinery pkg apis meta v1 group version for discovery based on context it is used
func (m *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) UnmarshalBinary(b []byte) error {
	var res IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
